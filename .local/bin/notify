#!/bin/bash
##################################################
# Notify
#
# Makes updating notification easy by naming each notification
#
# Author: tetsugakusha256
# Version: 0.2
##################################################


# Path to the id list file
TEMP_PATH="/tmp/notify_with_name.save"

# Path to the lock file
LOCK_FILE="/tmp/notify.lock"

cleanup() {
    rm -f "$LOCK_FILE"
}
is_lock_old() {
    current_time=$(date +%s)
    file_creation_time=$(stat -c %Y "$LOCK_FILE")
    time_difference=$((current_time - file_creation_time))
    echo "time_difference: $time_difference"
    # Check if the file is older than 60 seconds
    if [ "$time_difference" -gt 60 ]; then
        return 0
    else
        return 1
    fi
}
# Check if the lock file exists
if [ -e "$LOCK_FILE" ]; then
    echo "Another instance of the script is already running. Exiting."
    # Remove lock if it's old (means it didn't get removed correctly)
    if is_lock_old 
    then
        rm $LOCK_FILE
    else
        exit 1
    fi
fi


# Parse command-line options
ARGS=$(getopt -o n:a:t:r:h: --long name:,app-name:,hint:,action:,urgency:,help -- "$@")

# Exit if getopt encounters an error
if [ $? -ne 0 ]; then
    echo "Usage: notify SUMMARY <BODY>"
    exit 1
fi

# Create the lock file
touch "$LOCK_FILE"

eval set -- "$ARGS"

# arg_name=$(echo $@ | sed -n 's/.*-n[[:space:]]\([^[:space:]]*\).*/\1/p')
# args=$(echo $@ | sed 's/-n[[:space:]][^[:space:]]*//')

##################################################
# Parsing arguments
##################################################

# Initialize variables
arg_t=""
arg_name=""
arg_app_name=""
arg_urgency=""
arg_hint=""
arg_action=""

while true; do
    case "$1" in
        --help)
            echo ""
            echo "Usage:"
            echo "  notify [flag] SUMMARY <BODY> - Create a notification"
            echo ""
            echo "Flags:"
            echo "  --name        -n       Name used to recognise the same notification"
            echo "  --app-name    -a       Specifies the app name for the icon"
            echo "  --hint        -h       Specifies hint"
            echo "  -t                     Specifies the timeout in milliseconds at which to expire the notification"
            cleanup
            exit 0
            ;;
        -n)
            arg_name="$2"
            shift 2
            ;;
        --name)
            arg_name="$2"
            shift 2
            ;;
        -a)
            arg_app_name="$2"
            shift 2
            ;;
        --app-name)
            arg_app_name="$2"
            shift 2
            ;;
        -t)
            arg_t="$2"
            shift 2
            ;;
        -h)
            arg_hint="$2"
            shift 2
            ;;
        --hint)
            arg_hint+="--hint $2 "
            shift 2
            ;;
        --action)
            arg_action+="--action $2 "
            shift 2
            ;;
        --urgency)
            arg_urgency="$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Invalid option: $1"
            cleanup
            exit 1
            ;;
    esac
done


SUMMARY=""
BODY=""
# Process remaining positional arguments
if [ $# -eq 2 ]
then
    SUMMARY=\"$1\"
    BODY=\"$2\"
elif [ $# -eq 1 ]
then
    SUMMARY=$1
else
    echo "Invalid arg"
    cleanup
    exit 1
fi

##################################################
# Checking for ID
##################################################

notif_id=""
if [ ! -z $arg_name ]
then
    grep_result=$(grep -w $arg_name $TEMP_PATH | sort -r)
    if [ -n "$grep_result" ]
    then
        if [[ "$(echo $grep_result | cut -d' ' -f2)" = "$arg_name" ]]
        then
            notif_id=$(echo $grep_result | cut -d' ' -f1)
            # echo "id = ${notif_id}"
        fi
    fi
fi

##################################################
# Building final command
##################################################

# Constructing the notify-send command
final_cmd="notify-send -p "
if [ ! -z $arg_t ]
then
    final_cmd="${final_cmd} -t ${arg_t}"
fi
final_cmd="${final_cmd} ${arg_hint} ${arg_action}"
if [ ! -z $arg_app_name ]
then
    final_cmd="${final_cmd} --app-name ${arg_app_name}"
fi
if [ ! -z $arg_urgency ]
then
    echo "urgent arg"
    final_cmd="${final_cmd} --urgency ${arg_urgency}"
fi


if [ ! -z $notif_id ]
then
    # Remove the line with the id just used $notif_id (ID are regenerated after each call)
    # sed -i "/$(grep -w $arg_name $TEMP_PATH)/d" $TEMP_PATH
    echo $(grep -v -w $arg_name $TEMP_PATH) > $TEMP_PATH
    final_cmd="${final_cmd} -r ${notif_id} ${SUMMARY} ${BODY}"
else
    final_cmd="${final_cmd} ${SUMMARY} ${BODY}"
fi

##################################################
# Command call and ID management
##################################################

# echo $final_cmd
ID=$(eval "$final_cmd")
echo "${ID} ${arg_name}" >> $TEMP_PATH

# Remove the lock file when the script finishes
trap cleanup EXIT
