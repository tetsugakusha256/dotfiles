;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Poll
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defpoll clock_time :interval "5m" "date +\%H")
(defpoll clock_minute :interval "5s" "date +\%M")
;; TODO: use the magic var for it
(defpoll clock_second :interval "1s" "date +\%S")
(defpoll battery_value :interval "15s" "./scripts/battery --bat")
(defpoll battery_status :interval "1m" "./scripts/battery --bat-st")
(defpoll battery_icon :interval "1m" "./scripts/battery --bat-icon")
(defpoll disk_value :interval "15s" "./scripts/disk")
;; (defpoll memory_value :interval "1s" "./scripts/memory")
(defpoll brightness_value :interval "15s" "./scripts/brightness --value")
(defpoll brightness_icon :interval "15s" "./scripts/brightness --icon")

(deflisten workspaces :initial "[]" "bash ./scripts/get_workspaces")
(deflisten current_workspace :initial "1" "bash ./scripts/get_active_workspace")

(defwidget workspaces_module []
    (box :space-evenly false
      ;; (label :text "${workspaces}${current_workspace}" :visible false)
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace_entry ${workspace.id == current_workspace ? "workspace_active" : ""} ${workspace.windows > 0 ? "" : "workspace_hidden"}"
            (label :text "${workspace.id}" :class "${workspace.windows > 0 ? "workspace_label" : " "}")
            (label :text "${workspace.icon}" :class "${workspace.windows > 0 ? "workspace_icon" : " "}")
            )
          )
        )
      )
    )

(defwidget separator []
    (box :class "separator" :vexpand "false" :hexpand "false" :space-evenly false
        (label :text "|" :class "" )
  ))
(defwidget net_down_module []
    (box :class "net_down_module" :vexpand "false" :hexpand "false" :space-evenly false
        (label :text "󰇚" :class "icon" )
        (label :text {round(EWW_NET["wlan0"]["NET_DOWN"]/1000000,3)} :class "net_down_label" )
        (label :text "Mb/s" :class "net_down_label" )
  ))
(defwidget net_up_module []
    (box :class "net_up_module" :vexpand "false" :hexpand "false" :space-evenly false
        (label :text {round(EWW_NET["wlan0"]["NET_UP"]/1000000,3)} :class "net_up_label" )
        (label :text "Mb/s" :class "net_up_label" )
        (label :text "󰕒" :class "icon" )
  ))
(defwidget cpu_module []
    (box :class "cpu_module" :vexpand "false" :hexpand "false" :space-evenly false
        (label :text "" :class "cpu_icon icon" )
        (label :text {round(EWW_CPU.avg, 0)} :class "cpu_value" )
  ))
(defwidget memory_module []
    (box :class "memory_module" :vexpand "false" :hexpand "false" :space-evenly false
        ;; (label :text "󰍛" :class "memory_icon icon" )
        ;; (label :text memory_value :class "memory_value" )
        (label :text "󰍛" :class "memory_icon icon" )
        (label :text {round(100 * EWW_RAM.used_mem / EWW_RAM.total_mem,0)} :class "memory_value" )
  ))

(defwidget brightness_module []
    (box :class "brightness_module" :vexpand "false" :hexpand "false" :space-evenly false
        (label :text brightness_icon :class "brightness_icon icon" )
        (label :text brightness_value :class "brightness_value" )
  ))

(defwidget clock_module []
    (box :class "clock_module" :space-evenly "false" :orientation "h" :spacing "3" 
      (label :text {formattime(EWW_TIME, "%H:%M:%S")}:class "clock_label " )
      (label :text "󰥔" :class "clock_icon icon" )
  ))

(defwidget battery_module []
    (box :class "battery_module" :vexpand "false" :hexpand "false" :space-evenly false
        (label :text battery_value :class "battery_value" )
        (label :text battery_icon :class "battery_icon icon" )
        ;; (circular-progress :value battery_value
        ;;         :class "battery_circle"
        ;;         :thickness 8)
  ))

(defwidget disk_module []
    (box :class "disk_module" :vexpand "false" :hexpand "false" :space-evenly false
        (label :text disk_value :class "disk_value" )
        (label :text "󰋊" :class "disk_icon icon" )
  ))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Main section
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget left []
	(box :orientation  "h"
        :space-evenly false
        :halign       "start"
        :class        "left_modules"
(brightness_module)(separator)(memory_module)(separator)(cpu_module)(separator)(net_down_module)))


(defwidget right []
	(box :orientation "h" 
	     :space-evenly false  
             :halign "end"
	     :class "right_modules"
(net_up_module)(separator)(disk_module)(separator)(battery_module)(separator)(clock_module)))


(defwidget center []
	(box          :orientation "h"
	:space-evenly false
        :halign       "center"
	:class        "center_modules" 
(workspaces_module)))


(defwidget bar_1 []
  (box :class "bar_class"
       :orientation "h"
  (left)
  (center)
  (right)
    ))

(defwindow catbar
          :monitor 0
          :geometry (geometry :x "0%"
                              :y "0px"
                              :width "100%"
                              :height "66px"
                              :anchor "bottom center")
          :stacking "overlay"
          :focusable "false"
          :exclusive "false"
          :namespace "eww"
  (bar_1))
